on:
  # Trigger the workflow on push,
  # but only for the master branch
  push:
    branches:
      - master
    # tags:
    #   - v1.* # Push events to v1.0, v1.1, and v1.9 tags

# name: Create Release

jobs:
  linux:
    runs-on: ubuntu-18.04
    env:
      BUILD_VERSION: latest # Computed

    steps:
    - uses: actions/checkout@v2

    - name: Install dependecies
      run: npm i

    - name: Publish app
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      run: npm run publish

  mac:
    runs-on: macos-latest
    env:
      BUILD_VERSION: latest # Computed

    steps:
      - uses: actions/checkout@v2

      - name: Install dependecies
        run: npm i

      - name: Publish app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        run: npm run publish

  # windows:
  #   runs-on: windows-latest
  #   env:
  #     BUILD_VERSION: latest # Computed

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build app
  #       run: |
  #         sh pre-build-win.sh
  #         npm i
  #         npm run build
  #       shell: sh

  #     - name: Publish app
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
  #       run: npm run publish
    # - name: Publish artifacts
    #   uses: actions/upload-artifact@v2-preview
    #   with:
    #     name: defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu
    #     path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz
  # build:
  #   name: Create & Upload Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: v1.0.2
  #         release_name: 1.0.2
  #         draft: false
  #         prerelease: false
  #     - name: Upload release asset - linux
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./electron-auto-update-example-1.0.2/electron-auto-update-example-1.0.2.AppImage
  #         asset_name: electron-auto-update-example-1.0.2.AppImage
  #         asset_content_type: application/AppImage
# name: Upload Release Asset

# jobs:
#   build:
#     name: Upload Release Asset
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Build project # This would actually build your project, using zip for an example artifact
#         run: |
#           zip --junk-paths my-artifact README.md
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false
#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#           asset_path: ./my-artifact.zip
#           asset_name: my-artifact.zip
